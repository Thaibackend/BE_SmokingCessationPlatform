using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using SmokingQuitSupportAPI.Data;
using SmokingQuitSupportAPI.Services;
using SmokingQuitSupportAPI.Services.Interfaces;
using SmokingQuitSupportAPI.Models.Entities;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ===================================
// C·∫§U H·ªàN SERVICES (DEPENDENCY INJECTION)
// ===================================

/// <summary>
/// C·∫•u h√¨nh Entity Framework v·ªõi SQL Server
/// ƒê·ªçc connection string t·ª´ appsettings.json
/// </summary>
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

/// <summary>
/// ƒêƒÉng k√Ω c√°c services v√†o DI container
/// Scoped: T·∫°o instance m·ªõi cho m·ªói HTTP request
/// </summary>
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddScoped<ICommunityPostService, CommunityPostService>();
builder.Services.AddScoped<ISmokingStatusService, SmokingStatusService>();
builder.Services.AddScoped<IQuitPlanService, QuitPlanService>();
builder.Services.AddScoped<IProgressService, ProgressService>();
builder.Services.AddScoped<IAchievementService, AchievementService>();

// Package System Services
builder.Services.AddScoped<IPackageService, PackageService>();
builder.Services.AddScoped<IPremiumService, PremiumService>();

/// <summary>
/// C·∫•u h√¨nh JWT Authentication
/// </summary>
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var secretKey = jwtSettings["SecretKey"];

builder.Services.AddAuthentication(options =>
{
    // S·ª≠ d·ª•ng JWT Bearer l√†m scheme m·∫∑c ƒë·ªãnh
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        // Validate c√°c th√¥ng s·ªë c·ªßa token
        ValidateIssuer = true, // Ki·ªÉm tra issuer
        ValidateAudience = true, // Ki·ªÉm tra audience
        ValidateLifetime = true, // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
        ValidateIssuerSigningKey = true, // Ki·ªÉm tra signing key
        
        // Thi·∫øt l·∫≠p c√°c gi√° tr·ªã ƒë·ªÉ validate
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey!)),
        
        // Kh√¥ng cho ph√©p clock skew (ƒë·ªô l·ªách th·ªùi gian)
        ClockSkew = TimeSpan.Zero
    };
});

/// <summary>
/// Th√™m Authorization services v·ªõi policies
/// </summary>
builder.Services.AddAuthorization(options =>
{
    // Policy y√™u c·∫ßu role Admin
    options.AddPolicy("AdminOnly", policy => 
        policy.RequireRole("Admin"));
        
    // Policy y√™u c·∫ßu role Coach
    options.AddPolicy("CoachOnly", policy => 
        policy.RequireRole("Coach"));
        
    // Policy y√™u c·∫ßu role User
    options.AddPolicy("UserOnly", policy => 
        policy.RequireRole("User"));
        
    // Policy y√™u c·∫ßu Admin ho·∫∑c Coach
    options.AddPolicy("AdminOrCoach", policy => 
        policy.RequireRole("Admin", "Coach"));
        
    // Policy y√™u c·∫ßu b·∫•t k·ª≥ role n√†o (authenticated user)
    options.AddPolicy("AuthenticatedUser", policy => 
        policy.RequireAuthenticatedUser());
        
    // Premium Package Policy
    options.AddPolicy("PremiumOnly", policy => 
        policy.RequireAuthenticatedUser()); // Will be checked in controller
});

/// <summary>
/// Th√™m Controllers v·ªõi API Explorer cho Swagger
/// </summary>
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

/// <summary>
/// C·∫•u h√¨nh Swagger/OpenAPI v·ªõi JWT Authentication
/// </summary>
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo 
    { 
        Title = "Smoking Quit Support API", 
        Version = "v1",
        Description = "API h·ªó tr·ª£ cai thu·ªëc l√° v·ªõi h·ªá th·ªëng ph√¢n c·∫•p g√≥i Basic/Premium"
    });
    
    // C·∫•u h√¨nh JWT Authentication trong Swagger
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header s·ª≠ d·ª•ng Bearer scheme. Nh·∫≠p 'Bearer' [space] v√† token c·ªßa b·∫°n",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });
    
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

/// <summary>
/// C·∫•u h√¨nh CORS ƒë·ªÉ cho ph√©p frontend truy c·∫≠p
/// </summary>
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

// ===================================
// X√ÇY D·ª∞NG ·ª®NG D·ª§NG
// ===================================
var app = builder.Build();

// ===================================
// C·∫§U H√åNH MIDDLEWARE PIPELINE
// ===================================

/// <summary>
/// C·∫•u h√¨nh Swagger ch·ªâ trong Development environment
/// </summary>
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Smoking Quit Support API v1");
        c.RoutePrefix = string.Empty; // Swagger UI s·∫Ω hi·ªÉn th·ªã t·∫°i root URL
    });
}

/// <summary>
/// Middleware ƒë·ªÉ redirect HTTP sang HTTPS
/// </summary>
app.UseHttpsRedirection();

/// <summary>
/// Middleware CORS - ph·∫£i ƒë·∫∑t tr∆∞·ªõc Authentication
/// </summary>
app.UseCors("AllowAll");

/// <summary>
/// Middleware Authentication - x√°c th·ª±c JWT token
/// </summary>
app.UseAuthentication();

/// <summary>
/// Middleware Authorization - ki·ªÉm tra quy·ªÅn truy c·∫≠p
/// </summary>
app.UseAuthorization();

/// <summary>
/// Map Controllers ƒë·ªÉ x·ª≠ l√Ω c√°c API endpoints
/// </summary>
app.MapControllers();

/// <summary>
/// T·∫°o database v√† migrate n·∫øu ch∆∞a t·ªìn t·∫°i (ch·ªâ trong Development)
<<<<<<< HEAD
=======
/// KH√îNG X√ìA DATABASE - ch·ªâ t·∫°o n·∫øu ch∆∞a c√≥
>>>>>>> 647da918bd740fe6d490de8f4a9596e882126310
/// </summary>
if (app.Environment.IsDevelopment())
{
    using (var scope = app.Services.CreateScope())
    {
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        try
        {
<<<<<<< HEAD
            // X√≥a database c≈© v√† t·∫°o l·∫°i v·ªõi c·∫•u tr√∫c m·ªõi
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();
            Console.WriteLine("‚úÖ Database ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i th√†nh c√¥ng v·ªõi c·∫•u tr√∫c m·ªõi!");
            
            // T·∫°o d·ªØ li·ªáu m·∫´u
            await SeedData(context);
            Console.WriteLine("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå L·ªói khi t·∫°o database: {ex.Message}");
=======
            // CH·ªà t·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i (KH√îNG x√≥a data c≈©)
            var created = context.Database.EnsureCreated();
            
            if (created)
            {
                Console.WriteLine("‚úÖ Database ƒë∆∞·ª£c t·∫°o m·ªõi - ƒëang th√™m d·ªØ li·ªáu m·∫´u...");
                await SeedData(context);
                Console.WriteLine("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o!");
            }
            else
            {
                Console.WriteLine("üìä Database ƒë√£ t·ªìn t·∫°i - gi·ªØ nguy√™n d·ªØ li·ªáu hi·ªán c√≥");
                
                // Ch·ªâ th√™m d·ªØ li·ªáu m·∫´u n·∫øu b·∫£ng ch∆∞a c√≥ data
                if (!context.Achievements.Any())
                {
                    await SeedData(context);
                    Console.WriteLine("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u c√≤n thi·∫øu!");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå L·ªói khi ki·ªÉm tra database: {ex.Message}");
>>>>>>> 647da918bd740fe6d490de8f4a9596e882126310
        }
    }
}

/// <summary>
/// Ch·∫°y ·ª©ng d·ª•ng
/// </summary>
Console.WriteLine("üöÄ Smoking Quit Support API ƒëang kh·ªüi ƒë·ªông...");
Console.WriteLine("üìñ Swagger UI: https://localhost:7000");
Console.WriteLine("üîó API Base URL: https://localhost:7000/api");
Console.WriteLine("üì¶ Package System: Basic (Free) + Premium (Paid)");
Console.WriteLine("üíé Premium Features: Coach Support, Chat, Stage Management");

app.Run();

/// <summary>
/// T·∫°o d·ªØ li·ªáu m·∫´u
/// </summary>
static async Task SeedData(AppDbContext context)
{
    // T·∫°o c√°c achievement m·∫´u
    if (!context.Achievements.Any())
    {
        var achievements = new List<Achievement>
        {
            new Achievement { Name = "Ng√†y ƒë·∫ßu ti√™n", Description = "Ho√†n th√†nh ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc", Type = "DaysSmokeFree", RequiredValue = 1, BadgeColor = "#4CAF50" },
            new Achievement { Name = "M·ªôt tu·∫ßn", Description = "Ho√†n th√†nh 1 tu·∫ßn kh√¥ng h√∫t thu·ªëc", Type = "DaysSmokeFree", RequiredValue = 7, BadgeColor = "#2196F3" },
            new Achievement { Name = "M·ªôt th√°ng", Description = "Ho√†n th√†nh 1 th√°ng kh√¥ng h√∫t thu·ªëc", Type = "DaysSmokeFree", RequiredValue = 30, BadgeColor = "#FF9800" },
            new Achievement { Name = "Ba th√°ng", Description = "Ho√†n th√†nh 3 th√°ng kh√¥ng h√∫t thu·ªëc", Type = "DaysSmokeFree", RequiredValue = 90, BadgeColor = "#9C27B0" },
            new Achievement { Name = "Ti·∫øt ki·ªám ƒë·∫ßu ti√™n", Description = "Ti·∫øt ki·ªám ƒë∆∞·ª£c 100,000 VND", Type = "MoneySaved", RequiredValue = 100000, BadgeColor = "#FF5722" }
        };
        
        context.Achievements.AddRange(achievements);
        await context.SaveChangesAsync();
    }

    // T·∫°o member package m·∫´u
    if (!context.MemberPackages.Any())
    {
        var packages = new List<MemberPackage>
        {
            new MemberPackage 
            { 
                Name = "Basic Plan", 
                Description = "G√≥i c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu - Theo d√µi ti·∫øn tr√¨nh, Achievement c∆° b·∫£n", 
                Price = 0, 
                DurationDays = 30, 
                IsActive = true,
                CreatedById = 1
            },
            new MemberPackage 
            { 
                Name = "Premium Plan", 
                Description = "G√≥i cao c·∫•p v·ªõi coach h·ªó tr·ª£ - Theo d√µi ti·∫øn tr√¨nh, Coach c√° nh√¢n, T·∫•t c·∫£ achievement", 
                Price = 500000, 
                DurationDays = 90, 
                IsActive = true,
                CreatedById = 1
            }
        };
        
        context.MemberPackages.AddRange(packages);
        await context.SaveChangesAsync();
    }
} 